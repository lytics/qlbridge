// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v3.19.6
// source: plan/plan.proto

package plan

import (
	expr "github.com/lytics/qlbridge/expr"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The generic Node, must be exactly one of these types
type PlanPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parallel   *bool         `protobuf:"varint,1,req,name=parallel" json:"parallel,omitempty"`
	Select     *SelectPb     `protobuf:"bytes,3,opt,name=select" json:"select,omitempty"`
	Source     *SourcePb     `protobuf:"bytes,4,opt,name=source" json:"source,omitempty"`
	Where      *WherePb      `protobuf:"bytes,5,opt,name=where" json:"where,omitempty"`
	Having     *HavingPb     `protobuf:"bytes,6,opt,name=having" json:"having,omitempty"`
	GroupBy    *GroupByPb    `protobuf:"bytes,7,opt,name=groupBy" json:"groupBy,omitempty"`
	Order      *OrderPb      `protobuf:"bytes,8,opt,name=order" json:"order,omitempty"`
	JoinMerge  *JoinMergePb  `protobuf:"bytes,9,opt,name=joinMerge" json:"joinMerge,omitempty"`
	JoinKey    *JoinKeyPb    `protobuf:"bytes,10,opt,name=joinKey" json:"joinKey,omitempty"`
	Projection *ProjectionPb `protobuf:"bytes,11,opt,name=projection" json:"projection,omitempty"`
	Children   []*PlanPb     `protobuf:"bytes,12,rep,name=children" json:"children,omitempty"`
}

func (x *PlanPb) Reset() {
	*x = PlanPb{}
	mi := &file_plan_plan_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlanPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanPb) ProtoMessage() {}

func (x *PlanPb) ProtoReflect() protoreflect.Message {
	mi := &file_plan_plan_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanPb.ProtoReflect.Descriptor instead.
func (*PlanPb) Descriptor() ([]byte, []int) {
	return file_plan_plan_proto_rawDescGZIP(), []int{0}
}

func (x *PlanPb) GetParallel() bool {
	if x != nil && x.Parallel != nil {
		return *x.Parallel
	}
	return false
}

func (x *PlanPb) GetSelect() *SelectPb {
	if x != nil {
		return x.Select
	}
	return nil
}

func (x *PlanPb) GetSource() *SourcePb {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *PlanPb) GetWhere() *WherePb {
	if x != nil {
		return x.Where
	}
	return nil
}

func (x *PlanPb) GetHaving() *HavingPb {
	if x != nil {
		return x.Having
	}
	return nil
}

func (x *PlanPb) GetGroupBy() *GroupByPb {
	if x != nil {
		return x.GroupBy
	}
	return nil
}

func (x *PlanPb) GetOrder() *OrderPb {
	if x != nil {
		return x.Order
	}
	return nil
}

func (x *PlanPb) GetJoinMerge() *JoinMergePb {
	if x != nil {
		return x.JoinMerge
	}
	return nil
}

func (x *PlanPb) GetJoinKey() *JoinKeyPb {
	if x != nil {
		return x.JoinKey
	}
	return nil
}

func (x *PlanPb) GetProjection() *ProjectionPb {
	if x != nil {
		return x.Projection
	}
	return nil
}

func (x *PlanPb) GetChildren() []*PlanPb {
	if x != nil {
		return x.Children
	}
	return nil
}

// Select Plan
type SelectPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Select  *SqlSelectPb `protobuf:"bytes,1,req,name=select" json:"select,omitempty"`
	Context *ContextPb   `protobuf:"bytes,2,opt,name=context" json:"context,omitempty"`
}

func (x *SelectPb) Reset() {
	*x = SelectPb{}
	mi := &file_plan_plan_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SelectPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectPb) ProtoMessage() {}

func (x *SelectPb) ProtoReflect() protoreflect.Message {
	mi := &file_plan_plan_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectPb.ProtoReflect.Descriptor instead.
func (*SelectPb) Descriptor() ([]byte, []int) {
	return file_plan_plan_proto_rawDescGZIP(), []int{1}
}

func (x *SelectPb) GetSelect() *SqlSelectPb {
	if x != nil {
		return x.Select
	}
	return nil
}

func (x *SelectPb) GetContext() *ContextPb {
	if x != nil {
		return x.Context
	}
	return nil
}

// Context
type ContextPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Schema      *string `protobuf:"bytes,1,req,name=schema" json:"schema,omitempty"`
	Id          *uint64 `protobuf:"varint,2,req,name=id" json:"id,omitempty"`
	Fingerprint *uint64 `protobuf:"varint,3,req,name=fingerprint" json:"fingerprint,omitempty"`
}

func (x *ContextPb) Reset() {
	*x = ContextPb{}
	mi := &file_plan_plan_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContextPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContextPb) ProtoMessage() {}

func (x *ContextPb) ProtoReflect() protoreflect.Message {
	mi := &file_plan_plan_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContextPb.ProtoReflect.Descriptor instead.
func (*ContextPb) Descriptor() ([]byte, []int) {
	return file_plan_plan_proto_rawDescGZIP(), []int{2}
}

func (x *ContextPb) GetSchema() string {
	if x != nil && x.Schema != nil {
		return *x.Schema
	}
	return ""
}

func (x *ContextPb) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *ContextPb) GetFingerprint() uint64 {
	if x != nil && x.Fingerprint != nil {
		return *x.Fingerprint
	}
	return 0
}

// Source Plan is a plan for single source of select query, of which
// many may exist (joins, sub-querys etc)
type SourcePb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// do we need group-by, join, partition key for routing purposes?
	NeedsHashableKey *bool `protobuf:"varint,2,req,name=needsHashableKey" json:"needsHashableKey,omitempty"`
	// Is this final projection or not?  non finals are partial-sub-query types
	Final *bool `protobuf:"varint,3,req,name=final" json:"final,omitempty"`
	// Is this plan complete as is?  skip remaining plan walk steps
	Complete   *bool         `protobuf:"varint,4,req,name=complete" json:"complete,omitempty"`
	Join       *bool         `protobuf:"varint,5,req,name=join" json:"join,omitempty"`
	SourceExec *bool         `protobuf:"varint,6,req,name=sourceExec" json:"sourceExec,omitempty"`
	Custom     []byte        `protobuf:"bytes,7,opt,name=custom" json:"custom,omitempty"`
	SqlSource  *SqlSourcePb  `protobuf:"bytes,8,opt,name=sqlSource" json:"sqlSource,omitempty"`
	Projection *ProjectionPb `protobuf:"bytes,9,opt,name=projection" json:"projection,omitempty"`
}

func (x *SourcePb) Reset() {
	*x = SourcePb{}
	mi := &file_plan_plan_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SourcePb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourcePb) ProtoMessage() {}

func (x *SourcePb) ProtoReflect() protoreflect.Message {
	mi := &file_plan_plan_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourcePb.ProtoReflect.Descriptor instead.
func (*SourcePb) Descriptor() ([]byte, []int) {
	return file_plan_plan_proto_rawDescGZIP(), []int{3}
}

func (x *SourcePb) GetNeedsHashableKey() bool {
	if x != nil && x.NeedsHashableKey != nil {
		return *x.NeedsHashableKey
	}
	return false
}

func (x *SourcePb) GetFinal() bool {
	if x != nil && x.Final != nil {
		return *x.Final
	}
	return false
}

func (x *SourcePb) GetComplete() bool {
	if x != nil && x.Complete != nil {
		return *x.Complete
	}
	return false
}

func (x *SourcePb) GetJoin() bool {
	if x != nil && x.Join != nil {
		return *x.Join
	}
	return false
}

func (x *SourcePb) GetSourceExec() bool {
	if x != nil && x.SourceExec != nil {
		return *x.SourceExec
	}
	return false
}

func (x *SourcePb) GetCustom() []byte {
	if x != nil {
		return x.Custom
	}
	return nil
}

func (x *SourcePb) GetSqlSource() *SqlSourcePb {
	if x != nil {
		return x.SqlSource
	}
	return nil
}

func (x *SourcePb) GetProjection() *ProjectionPb {
	if x != nil {
		return x.Projection
	}
	return nil
}

// Where Plan
type WherePb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Select *SqlSelectPb `protobuf:"bytes,1,opt,name=select" json:"select,omitempty"`
	Final  *bool        `protobuf:"varint,2,req,name=final" json:"final,omitempty"`
}

func (x *WherePb) Reset() {
	*x = WherePb{}
	mi := &file_plan_plan_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WherePb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WherePb) ProtoMessage() {}

func (x *WherePb) ProtoReflect() protoreflect.Message {
	mi := &file_plan_plan_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WherePb.ProtoReflect.Descriptor instead.
func (*WherePb) Descriptor() ([]byte, []int) {
	return file_plan_plan_proto_rawDescGZIP(), []int{4}
}

func (x *WherePb) GetSelect() *SqlSelectPb {
	if x != nil {
		return x.Select
	}
	return nil
}

func (x *WherePb) GetFinal() bool {
	if x != nil && x.Final != nil {
		return *x.Final
	}
	return false
}

// Group By Plan
type GroupByPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Select *SqlSelectPb `protobuf:"bytes,1,opt,name=select" json:"select,omitempty"`
}

func (x *GroupByPb) Reset() {
	*x = GroupByPb{}
	mi := &file_plan_plan_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GroupByPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupByPb) ProtoMessage() {}

func (x *GroupByPb) ProtoReflect() protoreflect.Message {
	mi := &file_plan_plan_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupByPb.ProtoReflect.Descriptor instead.
func (*GroupByPb) Descriptor() ([]byte, []int) {
	return file_plan_plan_proto_rawDescGZIP(), []int{5}
}

func (x *GroupByPb) GetSelect() *SqlSelectPb {
	if x != nil {
		return x.Select
	}
	return nil
}

type HavingPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Select *SqlSelectPb `protobuf:"bytes,1,opt,name=select" json:"select,omitempty"`
}

func (x *HavingPb) Reset() {
	*x = HavingPb{}
	mi := &file_plan_plan_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HavingPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HavingPb) ProtoMessage() {}

func (x *HavingPb) ProtoReflect() protoreflect.Message {
	mi := &file_plan_plan_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HavingPb.ProtoReflect.Descriptor instead.
func (*HavingPb) Descriptor() ([]byte, []int) {
	return file_plan_plan_proto_rawDescGZIP(), []int{6}
}

func (x *HavingPb) GetSelect() *SqlSelectPb {
	if x != nil {
		return x.Select
	}
	return nil
}

type OrderPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Select *SqlSelectPb `protobuf:"bytes,1,opt,name=select" json:"select,omitempty"`
}

func (x *OrderPb) Reset() {
	*x = OrderPb{}
	mi := &file_plan_plan_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderPb) ProtoMessage() {}

func (x *OrderPb) ProtoReflect() protoreflect.Message {
	mi := &file_plan_plan_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderPb.ProtoReflect.Descriptor instead.
func (*OrderPb) Descriptor() ([]byte, []int) {
	return file_plan_plan_proto_rawDescGZIP(), []int{7}
}

func (x *OrderPb) GetSelect() *SqlSelectPb {
	if x != nil {
		return x.Select
	}
	return nil
}

type JoinMergePb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Having *expr.NodePb `protobuf:"bytes,1,opt,name=having" json:"having,omitempty"`
}

func (x *JoinMergePb) Reset() {
	*x = JoinMergePb{}
	mi := &file_plan_plan_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JoinMergePb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinMergePb) ProtoMessage() {}

func (x *JoinMergePb) ProtoReflect() protoreflect.Message {
	mi := &file_plan_plan_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinMergePb.ProtoReflect.Descriptor instead.
func (*JoinMergePb) Descriptor() ([]byte, []int) {
	return file_plan_plan_proto_rawDescGZIP(), []int{8}
}

func (x *JoinMergePb) GetHaving() *expr.NodePb {
	if x != nil {
		return x.Having
	}
	return nil
}

type JoinKeyPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Having *expr.NodePb `protobuf:"bytes,1,opt,name=having" json:"having,omitempty"`
}

func (x *JoinKeyPb) Reset() {
	*x = JoinKeyPb{}
	mi := &file_plan_plan_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JoinKeyPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinKeyPb) ProtoMessage() {}

func (x *JoinKeyPb) ProtoReflect() protoreflect.Message {
	mi := &file_plan_plan_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinKeyPb.ProtoReflect.Descriptor instead.
func (*JoinKeyPb) Descriptor() ([]byte, []int) {
	return file_plan_plan_proto_rawDescGZIP(), []int{9}
}

func (x *JoinKeyPb) GetHaving() *expr.NodePb {
	if x != nil {
		return x.Having
	}
	return nil
}

var File_plan_plan_proto protoreflect.FileDescriptor

var file_plan_plan_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x6e, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x1a, 0x0d, 0x72, 0x65, 0x6c, 0x2f, 0x73, 0x71, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x65, 0x78, 0x70, 0x72, 0x2f, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xca, 0x03, 0x0a, 0x06, 0x50, 0x6c, 0x61, 0x6e,
	0x50, 0x62, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x08, 0x52, 0x08, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x12, 0x26,
	0x0a, 0x06, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x50, 0x62, 0x52, 0x06,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x26, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x50, 0x62, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x23,
	0x0a, 0x05, 0x77, 0x68, 0x65, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x57, 0x68, 0x65, 0x72, 0x65, 0x50, 0x62, 0x52, 0x05, 0x77, 0x68,
	0x65, 0x72, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x68, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x48, 0x61, 0x76, 0x69, 0x6e,
	0x67, 0x50, 0x62, 0x52, 0x06, 0x68, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x12, 0x29, 0x0a, 0x07, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70,
	0x6c, 0x61, 0x6e, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x50, 0x62, 0x52, 0x07, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x12, 0x23, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x50, 0x62, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x09, 0x6a,
	0x6f, 0x69, 0x6e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x50,
	0x62, 0x52, 0x09, 0x6a, 0x6f, 0x69, 0x6e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x07,
	0x6a, 0x6f, 0x69, 0x6e, 0x4b, 0x65, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x4b, 0x65, 0x79, 0x50, 0x62, 0x52, 0x07,
	0x6a, 0x6f, 0x69, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x65,
	0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x62, 0x52, 0x0a,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x08, 0x63, 0x68,
	0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70,
	0x6c, 0x61, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x50, 0x62, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c,
	0x64, 0x72, 0x65, 0x6e, 0x22, 0x5f, 0x0a, 0x08, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x50, 0x62,
	0x12, 0x28, 0x0a, 0x06, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x72, 0x65, 0x6c, 0x2e, 0x53, 0x71, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x50, 0x62, 0x52, 0x06, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x29, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x6c,
	0x61, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x50, 0x62, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x55, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x50, 0x62, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x69,
	0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28, 0x04, 0x52,
	0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x22, 0x97, 0x02, 0x0a,
	0x08, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x62, 0x12, 0x2a, 0x0a, 0x10, 0x6e, 0x65, 0x65,
	0x64, 0x73, 0x48, 0x61, 0x73, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x08, 0x52, 0x10, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x48, 0x61, 0x73, 0x68, 0x61, 0x62,
	0x6c, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x03,
	0x20, 0x02, 0x28, 0x08, 0x52, 0x05, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x08, 0x52, 0x08, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6a, 0x6f, 0x69, 0x6e, 0x18,
	0x05, 0x20, 0x02, 0x28, 0x08, 0x52, 0x04, 0x6a, 0x6f, 0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x78, 0x65, 0x63, 0x18, 0x06, 0x20, 0x02, 0x28, 0x08, 0x52,
	0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x78, 0x65, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x12, 0x2e, 0x0a, 0x09, 0x73, 0x71, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x6c, 0x2e, 0x53, 0x71, 0x6c,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x62, 0x52, 0x09, 0x73, 0x71, 0x6c, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x31, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x65, 0x6c, 0x2e, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x62, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x49, 0x0a, 0x07, 0x57, 0x68, 0x65, 0x72, 0x65, 0x50,
	0x62, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x6c, 0x2e, 0x53, 0x71, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x50, 0x62, 0x52, 0x06, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x66,
	0x69, 0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x02, 0x28, 0x08, 0x52, 0x05, 0x66, 0x69, 0x6e, 0x61,
	0x6c, 0x22, 0x35, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x50, 0x62, 0x12, 0x28,
	0x0a, 0x06, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x72, 0x65, 0x6c, 0x2e, 0x53, 0x71, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x50, 0x62,
	0x52, 0x06, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x22, 0x34, 0x0a, 0x08, 0x48, 0x61, 0x76, 0x69,
	0x6e, 0x67, 0x50, 0x62, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x6c, 0x2e, 0x53, 0x71, 0x6c, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x50, 0x62, 0x52, 0x06, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x22, 0x33,
	0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x62, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x6c, 0x2e,
	0x53, 0x71, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x50, 0x62, 0x52, 0x06, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x22, 0x33, 0x0a, 0x0b, 0x4a, 0x6f, 0x69, 0x6e, 0x4d, 0x65, 0x72, 0x67, 0x65,
	0x50, 0x62, 0x12, 0x24, 0x0a, 0x06, 0x68, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x62,
	0x52, 0x06, 0x68, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x22, 0x31, 0x0a, 0x09, 0x4a, 0x6f, 0x69, 0x6e,
	0x4b, 0x65, 0x79, 0x50, 0x62, 0x12, 0x24, 0x0a, 0x06, 0x68, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x50, 0x62, 0x52, 0x06, 0x68, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x42, 0x21, 0x5a, 0x1f, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x2f, 0x71, 0x6c, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2f, 0x70, 0x6c, 0x61, 0x6e,
}

var (
	file_plan_plan_proto_rawDescOnce sync.Once
	file_plan_plan_proto_rawDescData = file_plan_plan_proto_rawDesc
)

func file_plan_plan_proto_rawDescGZIP() []byte {
	file_plan_plan_proto_rawDescOnce.Do(func() {
		file_plan_plan_proto_rawDescData = protoimpl.X.CompressGZIP(file_plan_plan_proto_rawDescData)
	})
	return file_plan_plan_proto_rawDescData
}

var file_plan_plan_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_plan_plan_proto_goTypes = []any{
	(*PlanPb)(nil),       // 0: plan.PlanPb
	(*SelectPb)(nil),     // 1: plan.SelectPb
	(*ContextPb)(nil),    // 2: plan.ContextPb
	(*SourcePb)(nil),     // 3: plan.SourcePb
	(*WherePb)(nil),      // 4: plan.WherePb
	(*GroupByPb)(nil),    // 5: plan.GroupByPb
	(*HavingPb)(nil),     // 6: plan.HavingPb
	(*OrderPb)(nil),      // 7: plan.OrderPb
	(*JoinMergePb)(nil),  // 8: plan.JoinMergePb
	(*JoinKeyPb)(nil),    // 9: plan.JoinKeyPb
	(*ProjectionPb)(nil), // 10: rel.ProjectionPb
	(*SqlSelectPb)(nil),  // 11: rel.SqlSelectPb
	(*SqlSourcePb)(nil),  // 12: rel.SqlSourcePb
	(*expr.NodePb)(nil),  // 13: expr.NodePb
}
var file_plan_plan_proto_depIdxs = []int32{
	1,  // 0: plan.PlanPb.select:type_name -> plan.SelectPb
	3,  // 1: plan.PlanPb.source:type_name -> plan.SourcePb
	4,  // 2: plan.PlanPb.where:type_name -> plan.WherePb
	6,  // 3: plan.PlanPb.having:type_name -> plan.HavingPb
	5,  // 4: plan.PlanPb.groupBy:type_name -> plan.GroupByPb
	7,  // 5: plan.PlanPb.order:type_name -> plan.OrderPb
	8,  // 6: plan.PlanPb.joinMerge:type_name -> plan.JoinMergePb
	9,  // 7: plan.PlanPb.joinKey:type_name -> plan.JoinKeyPb
	10, // 8: plan.PlanPb.projection:type_name -> rel.ProjectionPb
	0,  // 9: plan.PlanPb.children:type_name -> plan.PlanPb
	11, // 10: plan.SelectPb.select:type_name -> rel.SqlSelectPb
	2,  // 11: plan.SelectPb.context:type_name -> plan.ContextPb
	12, // 12: plan.SourcePb.sqlSource:type_name -> rel.SqlSourcePb
	10, // 13: plan.SourcePb.projection:type_name -> rel.ProjectionPb
	11, // 14: plan.WherePb.select:type_name -> rel.SqlSelectPb
	11, // 15: plan.GroupByPb.select:type_name -> rel.SqlSelectPb
	11, // 16: plan.HavingPb.select:type_name -> rel.SqlSelectPb
	11, // 17: plan.OrderPb.select:type_name -> rel.SqlSelectPb
	13, // 18: plan.JoinMergePb.having:type_name -> expr.NodePb
	13, // 19: plan.JoinKeyPb.having:type_name -> expr.NodePb
	20, // [20:20] is the sub-list for method output_type
	20, // [20:20] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_plan_plan_proto_init() }
func file_plan_plan_proto_init() {
	if File_plan_plan_proto != nil {
		return
	}
	file_rel_sql_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_plan_plan_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_plan_plan_proto_goTypes,
		DependencyIndexes: file_plan_plan_proto_depIdxs,
		MessageInfos:      file_plan_plan_proto_msgTypes,
	}.Build()
	File_plan_plan_proto = out.File
	file_plan_plan_proto_rawDesc = nil
	file_plan_plan_proto_goTypes = nil
	file_plan_plan_proto_depIdxs = nil
}
