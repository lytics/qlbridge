syntax = "proto2";
package plan;
option go_package = "github.com/lytics/qlbridge/plan";

import "rel/sql.proto";
import "expr/node.proto";
//import "schema/schema.proto";

// The generic Node, must be exactly one of these types
message PlanPb {
  required bool                 parallel = 1;
  optional SelectPb               select = 3;
  optional SourcePb               source = 4;
  optional WherePb                 where = 5;
  optional HavingPb               having = 6;
  optional GroupByPb             groupBy = 7;
  optional OrderPb                 order = 8;
  optional JoinMergePb         joinMerge = 9;
  optional JoinKeyPb            joinKey = 10;
  optional rel.ProjectionPb  projection = 11;
  repeated PlanPb              children = 12;
}

// Select Plan 
message SelectPb {
	required rel.SqlSelectPb    select = 1;
	optional ContextPb         context = 2;
}

// Context 
message ContextPb {
	required string      schema = 1;
	required uint64          id = 2;
	required uint64 fingerprint = 3;
}

// Source Plan is a plan for single source of select query, of which
// many may exist (joins, sub-querys etc)
message SourcePb {
	// do we need group-by, join, partition key for routing purposes?
	required bool needsHashableKey         = 2;
	// Is this final projection or not?  non finals are partial-sub-query types
	required bool final                    = 3;
	// Is this plan complete as is?  skip remaining plan walk steps
	required bool complete                 = 4;
	required bool join                     = 5;
	required bool sourceExec               = 6;
	optional bytes custom                  = 7;
	optional rel.SqlSourcePb sqlSource     = 8;
	optional rel.ProjectionPb projection   = 9;
}

// Where Plan 
message WherePb {
	optional rel.SqlSelectPb select = 1;
	required bool            final  = 2;
}

// Group By Plan 
message GroupByPb {
	optional rel.SqlSelectPb   select = 1;
}

message HavingPb {
	optional rel.SqlSelectPb   select = 1;
}

message OrderPb {
	optional rel.SqlSelectPb   select = 1;
}

message JoinMergePb {
	optional expr.NodePb having = 1;
}

message JoinKeyPb {
	optional expr.NodePb having = 1;
}