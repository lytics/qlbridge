syntax = "proto2";
package rel;
option go_package = "github.com/lytics/qlbridge/rel";

import "expr/node.proto";

// The generic SqlStatement, must be exactly one of these types
message SqlStatementPb {
  optional SqlSelectPb  select = 1;
  optional SqlSourcePb  source = 2;
  optional ProjectionPb projection = 4;
}

message SqlSelectPb {
  required string db = 1;
  required string raw = 2;
  required bool star = 3;
  required bool distinct = 4;
  repeated ColumnPb columns = 5;
  repeated SqlSourcePb from = 6;
  optional string into = 7;
  optional SqlWherePb where = 8;
  optional expr.NodePb having = 9;
  repeated ColumnPb groupBy = 10;
  repeated ColumnPb orderBy = 11;
  optional int32 limit = 12;
  optional int32 offset = 13;
  optional string alias = 14;
  optional ProjectionPb projection = 15;
  required bool isAgg = 16;
  required bool finalized = 17;
  required bool schemaqry = 18;
  optional bytes with   = 19;
}

message SqlSourcePb {
  optional bool final = 1;
  optional string aliasInner = 2;
  repeated ColumnPb columns = 3;
  repeated KvInt colIndex = 4;
  repeated expr.NodePb joinNodes = 5;
  optional SqlSelectPb source = 6;
  optional string raw = 7;
  optional string name = 8;
  optional string alias = 9;
  required int32 op = 10;
  required int32 leftOrRight = 11;
  required int32 joinType = 12;
  optional expr.NodePb joinExpr = 13;
  optional SqlSelectPb subQuery = 14;
  optional bool seekable = 15;
}

message SqlWherePb {
  required int32 op = 1;
  optional SqlSelectPb source = 2;
  optional expr.NodePb Expr = 3;
}

message ProjectionPb {
  required bool distinct          = 1;
  required bool final             = 2;
  repeated string colNames        = 3;
  repeated ResultColumnPb columns = 4;
}

message ResultColumnPb {
  optional bool final = 1;
  required string name = 2;
  required int32 colPos = 3;
  optional ColumnPb column = 4;
  optional bool star = 5;
  required string as = 6;
  required int32 valueType = 7;
}


message KvInt {
  required string k = 1;
  required int32 v = 2;
}


message ColumnPb {
  optional bytes sourceQuote = 1;
  optional bytes asQuoteByte = 2;
  optional string originalAs = 3;
  optional string left = 4;
  optional string right = 5;
  optional int32 parentIndex = 6;
  optional int32 index = 7;
  optional int32 sourceIndex = 8;
  optional string sourceField = 9;
  optional string as  = 11;
  optional string comment  = 12;
  optional string order = 13;
  optional bool star = 14;
  optional bool agg = 15;
  optional expr.NodePb Expr = 16;
  optional expr.NodePb Guard = 17;
}



message CommandColumnPb {
  optional expr.NodePb Expr = 1;
  required string name = 2;
}