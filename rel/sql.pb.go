// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v3.19.6
// source: rel/sql.proto

package rel

import (
	expr "github.com/lytics/qlbridge/expr"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The generic SqlStatement, must be exactly one of these types
type SqlStatementPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Select     *SqlSelectPb  `protobuf:"bytes,1,opt,name=select" json:"select,omitempty"`
	Source     *SqlSourcePb  `protobuf:"bytes,2,opt,name=source" json:"source,omitempty"`
	Projection *ProjectionPb `protobuf:"bytes,4,opt,name=projection" json:"projection,omitempty"`
}

func (x *SqlStatementPb) Reset() {
	*x = SqlStatementPb{}
	mi := &file_rel_sql_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SqlStatementPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlStatementPb) ProtoMessage() {}

func (x *SqlStatementPb) ProtoReflect() protoreflect.Message {
	mi := &file_rel_sql_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlStatementPb.ProtoReflect.Descriptor instead.
func (*SqlStatementPb) Descriptor() ([]byte, []int) {
	return file_rel_sql_proto_rawDescGZIP(), []int{0}
}

func (x *SqlStatementPb) GetSelect() *SqlSelectPb {
	if x != nil {
		return x.Select
	}
	return nil
}

func (x *SqlStatementPb) GetSource() *SqlSourcePb {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *SqlStatementPb) GetProjection() *ProjectionPb {
	if x != nil {
		return x.Projection
	}
	return nil
}

type SqlSelectPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Db         *string        `protobuf:"bytes,1,req,name=db" json:"db,omitempty"`
	Raw        *string        `protobuf:"bytes,2,req,name=raw" json:"raw,omitempty"`
	Star       *bool          `protobuf:"varint,3,req,name=star" json:"star,omitempty"`
	Distinct   *bool          `protobuf:"varint,4,req,name=distinct" json:"distinct,omitempty"`
	Columns    []*ColumnPb    `protobuf:"bytes,5,rep,name=columns" json:"columns,omitempty"`
	From       []*SqlSourcePb `protobuf:"bytes,6,rep,name=from" json:"from,omitempty"`
	Into       *string        `protobuf:"bytes,7,opt,name=into" json:"into,omitempty"`
	Where      *SqlWherePb    `protobuf:"bytes,8,opt,name=where" json:"where,omitempty"`
	Having     *expr.NodePb   `protobuf:"bytes,9,opt,name=having" json:"having,omitempty"`
	GroupBy    []*ColumnPb    `protobuf:"bytes,10,rep,name=groupBy" json:"groupBy,omitempty"`
	OrderBy    []*ColumnPb    `protobuf:"bytes,11,rep,name=orderBy" json:"orderBy,omitempty"`
	Limit      *int32         `protobuf:"varint,12,opt,name=limit" json:"limit,omitempty"`
	Offset     *int32         `protobuf:"varint,13,opt,name=offset" json:"offset,omitempty"`
	Alias      *string        `protobuf:"bytes,14,opt,name=alias" json:"alias,omitempty"`
	Projection *ProjectionPb  `protobuf:"bytes,15,opt,name=projection" json:"projection,omitempty"`
	IsAgg      *bool          `protobuf:"varint,16,req,name=isAgg" json:"isAgg,omitempty"`
	Finalized  *bool          `protobuf:"varint,17,req,name=finalized" json:"finalized,omitempty"`
	Schemaqry  *bool          `protobuf:"varint,18,req,name=schemaqry" json:"schemaqry,omitempty"`
	With       []byte         `protobuf:"bytes,19,opt,name=with" json:"with,omitempty"`
}

func (x *SqlSelectPb) Reset() {
	*x = SqlSelectPb{}
	mi := &file_rel_sql_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SqlSelectPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlSelectPb) ProtoMessage() {}

func (x *SqlSelectPb) ProtoReflect() protoreflect.Message {
	mi := &file_rel_sql_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlSelectPb.ProtoReflect.Descriptor instead.
func (*SqlSelectPb) Descriptor() ([]byte, []int) {
	return file_rel_sql_proto_rawDescGZIP(), []int{1}
}

func (x *SqlSelectPb) GetDb() string {
	if x != nil && x.Db != nil {
		return *x.Db
	}
	return ""
}

func (x *SqlSelectPb) GetRaw() string {
	if x != nil && x.Raw != nil {
		return *x.Raw
	}
	return ""
}

func (x *SqlSelectPb) GetStar() bool {
	if x != nil && x.Star != nil {
		return *x.Star
	}
	return false
}

func (x *SqlSelectPb) GetDistinct() bool {
	if x != nil && x.Distinct != nil {
		return *x.Distinct
	}
	return false
}

func (x *SqlSelectPb) GetColumns() []*ColumnPb {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *SqlSelectPb) GetFrom() []*SqlSourcePb {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *SqlSelectPb) GetInto() string {
	if x != nil && x.Into != nil {
		return *x.Into
	}
	return ""
}

func (x *SqlSelectPb) GetWhere() *SqlWherePb {
	if x != nil {
		return x.Where
	}
	return nil
}

func (x *SqlSelectPb) GetHaving() *expr.NodePb {
	if x != nil {
		return x.Having
	}
	return nil
}

func (x *SqlSelectPb) GetGroupBy() []*ColumnPb {
	if x != nil {
		return x.GroupBy
	}
	return nil
}

func (x *SqlSelectPb) GetOrderBy() []*ColumnPb {
	if x != nil {
		return x.OrderBy
	}
	return nil
}

func (x *SqlSelectPb) GetLimit() int32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *SqlSelectPb) GetOffset() int32 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

func (x *SqlSelectPb) GetAlias() string {
	if x != nil && x.Alias != nil {
		return *x.Alias
	}
	return ""
}

func (x *SqlSelectPb) GetProjection() *ProjectionPb {
	if x != nil {
		return x.Projection
	}
	return nil
}

func (x *SqlSelectPb) GetIsAgg() bool {
	if x != nil && x.IsAgg != nil {
		return *x.IsAgg
	}
	return false
}

func (x *SqlSelectPb) GetFinalized() bool {
	if x != nil && x.Finalized != nil {
		return *x.Finalized
	}
	return false
}

func (x *SqlSelectPb) GetSchemaqry() bool {
	if x != nil && x.Schemaqry != nil {
		return *x.Schemaqry
	}
	return false
}

func (x *SqlSelectPb) GetWith() []byte {
	if x != nil {
		return x.With
	}
	return nil
}

type SqlSourcePb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Final       *bool          `protobuf:"varint,1,opt,name=final" json:"final,omitempty"`
	AliasInner  *string        `protobuf:"bytes,2,opt,name=aliasInner" json:"aliasInner,omitempty"`
	Columns     []*ColumnPb    `protobuf:"bytes,3,rep,name=columns" json:"columns,omitempty"`
	ColIndex    []*KvInt       `protobuf:"bytes,4,rep,name=colIndex" json:"colIndex,omitempty"`
	JoinNodes   []*expr.NodePb `protobuf:"bytes,5,rep,name=joinNodes" json:"joinNodes,omitempty"`
	Source      *SqlSelectPb   `protobuf:"bytes,6,opt,name=source" json:"source,omitempty"`
	Raw         *string        `protobuf:"bytes,7,opt,name=raw" json:"raw,omitempty"`
	Name        *string        `protobuf:"bytes,8,opt,name=name" json:"name,omitempty"`
	Alias       *string        `protobuf:"bytes,9,opt,name=alias" json:"alias,omitempty"`
	Op          *int32         `protobuf:"varint,10,req,name=op" json:"op,omitempty"`
	LeftOrRight *int32         `protobuf:"varint,11,req,name=leftOrRight" json:"leftOrRight,omitempty"`
	JoinType    *int32         `protobuf:"varint,12,req,name=joinType" json:"joinType,omitempty"`
	JoinExpr    *expr.NodePb   `protobuf:"bytes,13,opt,name=joinExpr" json:"joinExpr,omitempty"`
	SubQuery    *SqlSelectPb   `protobuf:"bytes,14,opt,name=subQuery" json:"subQuery,omitempty"`
	Seekable    *bool          `protobuf:"varint,15,opt,name=seekable" json:"seekable,omitempty"`
}

func (x *SqlSourcePb) Reset() {
	*x = SqlSourcePb{}
	mi := &file_rel_sql_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SqlSourcePb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlSourcePb) ProtoMessage() {}

func (x *SqlSourcePb) ProtoReflect() protoreflect.Message {
	mi := &file_rel_sql_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlSourcePb.ProtoReflect.Descriptor instead.
func (*SqlSourcePb) Descriptor() ([]byte, []int) {
	return file_rel_sql_proto_rawDescGZIP(), []int{2}
}

func (x *SqlSourcePb) GetFinal() bool {
	if x != nil && x.Final != nil {
		return *x.Final
	}
	return false
}

func (x *SqlSourcePb) GetAliasInner() string {
	if x != nil && x.AliasInner != nil {
		return *x.AliasInner
	}
	return ""
}

func (x *SqlSourcePb) GetColumns() []*ColumnPb {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *SqlSourcePb) GetColIndex() []*KvInt {
	if x != nil {
		return x.ColIndex
	}
	return nil
}

func (x *SqlSourcePb) GetJoinNodes() []*expr.NodePb {
	if x != nil {
		return x.JoinNodes
	}
	return nil
}

func (x *SqlSourcePb) GetSource() *SqlSelectPb {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *SqlSourcePb) GetRaw() string {
	if x != nil && x.Raw != nil {
		return *x.Raw
	}
	return ""
}

func (x *SqlSourcePb) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *SqlSourcePb) GetAlias() string {
	if x != nil && x.Alias != nil {
		return *x.Alias
	}
	return ""
}

func (x *SqlSourcePb) GetOp() int32 {
	if x != nil && x.Op != nil {
		return *x.Op
	}
	return 0
}

func (x *SqlSourcePb) GetLeftOrRight() int32 {
	if x != nil && x.LeftOrRight != nil {
		return *x.LeftOrRight
	}
	return 0
}

func (x *SqlSourcePb) GetJoinType() int32 {
	if x != nil && x.JoinType != nil {
		return *x.JoinType
	}
	return 0
}

func (x *SqlSourcePb) GetJoinExpr() *expr.NodePb {
	if x != nil {
		return x.JoinExpr
	}
	return nil
}

func (x *SqlSourcePb) GetSubQuery() *SqlSelectPb {
	if x != nil {
		return x.SubQuery
	}
	return nil
}

func (x *SqlSourcePb) GetSeekable() bool {
	if x != nil && x.Seekable != nil {
		return *x.Seekable
	}
	return false
}

type SqlWherePb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Op     *int32       `protobuf:"varint,1,req,name=op" json:"op,omitempty"`
	Source *SqlSelectPb `protobuf:"bytes,2,opt,name=source" json:"source,omitempty"`
	Expr   *expr.NodePb `protobuf:"bytes,3,opt,name=Expr" json:"Expr,omitempty"`
}

func (x *SqlWherePb) Reset() {
	*x = SqlWherePb{}
	mi := &file_rel_sql_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SqlWherePb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlWherePb) ProtoMessage() {}

func (x *SqlWherePb) ProtoReflect() protoreflect.Message {
	mi := &file_rel_sql_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlWherePb.ProtoReflect.Descriptor instead.
func (*SqlWherePb) Descriptor() ([]byte, []int) {
	return file_rel_sql_proto_rawDescGZIP(), []int{3}
}

func (x *SqlWherePb) GetOp() int32 {
	if x != nil && x.Op != nil {
		return *x.Op
	}
	return 0
}

func (x *SqlWherePb) GetSource() *SqlSelectPb {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *SqlWherePb) GetExpr() *expr.NodePb {
	if x != nil {
		return x.Expr
	}
	return nil
}

type ProjectionPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Distinct *bool             `protobuf:"varint,1,req,name=distinct" json:"distinct,omitempty"`
	Final    *bool             `protobuf:"varint,2,req,name=final" json:"final,omitempty"`
	ColNames []string          `protobuf:"bytes,3,rep,name=colNames" json:"colNames,omitempty"`
	Columns  []*ResultColumnPb `protobuf:"bytes,4,rep,name=columns" json:"columns,omitempty"`
}

func (x *ProjectionPb) Reset() {
	*x = ProjectionPb{}
	mi := &file_rel_sql_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProjectionPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectionPb) ProtoMessage() {}

func (x *ProjectionPb) ProtoReflect() protoreflect.Message {
	mi := &file_rel_sql_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectionPb.ProtoReflect.Descriptor instead.
func (*ProjectionPb) Descriptor() ([]byte, []int) {
	return file_rel_sql_proto_rawDescGZIP(), []int{4}
}

func (x *ProjectionPb) GetDistinct() bool {
	if x != nil && x.Distinct != nil {
		return *x.Distinct
	}
	return false
}

func (x *ProjectionPb) GetFinal() bool {
	if x != nil && x.Final != nil {
		return *x.Final
	}
	return false
}

func (x *ProjectionPb) GetColNames() []string {
	if x != nil {
		return x.ColNames
	}
	return nil
}

func (x *ProjectionPb) GetColumns() []*ResultColumnPb {
	if x != nil {
		return x.Columns
	}
	return nil
}

type ResultColumnPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Final     *bool     `protobuf:"varint,1,opt,name=final" json:"final,omitempty"`
	Name      *string   `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`
	ColPos    *int32    `protobuf:"varint,3,req,name=colPos" json:"colPos,omitempty"`
	Column    *ColumnPb `protobuf:"bytes,4,opt,name=column" json:"column,omitempty"`
	Star      *bool     `protobuf:"varint,5,opt,name=star" json:"star,omitempty"`
	As        *string   `protobuf:"bytes,6,req,name=as" json:"as,omitempty"`
	ValueType *int32    `protobuf:"varint,7,req,name=valueType" json:"valueType,omitempty"`
}

func (x *ResultColumnPb) Reset() {
	*x = ResultColumnPb{}
	mi := &file_rel_sql_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResultColumnPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultColumnPb) ProtoMessage() {}

func (x *ResultColumnPb) ProtoReflect() protoreflect.Message {
	mi := &file_rel_sql_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultColumnPb.ProtoReflect.Descriptor instead.
func (*ResultColumnPb) Descriptor() ([]byte, []int) {
	return file_rel_sql_proto_rawDescGZIP(), []int{5}
}

func (x *ResultColumnPb) GetFinal() bool {
	if x != nil && x.Final != nil {
		return *x.Final
	}
	return false
}

func (x *ResultColumnPb) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ResultColumnPb) GetColPos() int32 {
	if x != nil && x.ColPos != nil {
		return *x.ColPos
	}
	return 0
}

func (x *ResultColumnPb) GetColumn() *ColumnPb {
	if x != nil {
		return x.Column
	}
	return nil
}

func (x *ResultColumnPb) GetStar() bool {
	if x != nil && x.Star != nil {
		return *x.Star
	}
	return false
}

func (x *ResultColumnPb) GetAs() string {
	if x != nil && x.As != nil {
		return *x.As
	}
	return ""
}

func (x *ResultColumnPb) GetValueType() int32 {
	if x != nil && x.ValueType != nil {
		return *x.ValueType
	}
	return 0
}

type KvInt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	K *string `protobuf:"bytes,1,req,name=k" json:"k,omitempty"`
	V *int32  `protobuf:"varint,2,req,name=v" json:"v,omitempty"`
}

func (x *KvInt) Reset() {
	*x = KvInt{}
	mi := &file_rel_sql_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KvInt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KvInt) ProtoMessage() {}

func (x *KvInt) ProtoReflect() protoreflect.Message {
	mi := &file_rel_sql_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KvInt.ProtoReflect.Descriptor instead.
func (*KvInt) Descriptor() ([]byte, []int) {
	return file_rel_sql_proto_rawDescGZIP(), []int{6}
}

func (x *KvInt) GetK() string {
	if x != nil && x.K != nil {
		return *x.K
	}
	return ""
}

func (x *KvInt) GetV() int32 {
	if x != nil && x.V != nil {
		return *x.V
	}
	return 0
}

type ColumnPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceQuote []byte       `protobuf:"bytes,1,opt,name=sourceQuote" json:"sourceQuote,omitempty"`
	AsQuoteByte []byte       `protobuf:"bytes,2,opt,name=asQuoteByte" json:"asQuoteByte,omitempty"`
	OriginalAs  *string      `protobuf:"bytes,3,opt,name=originalAs" json:"originalAs,omitempty"`
	Left        *string      `protobuf:"bytes,4,opt,name=left" json:"left,omitempty"`
	Right       *string      `protobuf:"bytes,5,opt,name=right" json:"right,omitempty"`
	ParentIndex *int32       `protobuf:"varint,6,opt,name=parentIndex" json:"parentIndex,omitempty"`
	Index       *int32       `protobuf:"varint,7,opt,name=index" json:"index,omitempty"`
	SourceIndex *int32       `protobuf:"varint,8,opt,name=sourceIndex" json:"sourceIndex,omitempty"`
	SourceField *string      `protobuf:"bytes,9,opt,name=sourceField" json:"sourceField,omitempty"`
	As          *string      `protobuf:"bytes,11,opt,name=as" json:"as,omitempty"`
	Comment     *string      `protobuf:"bytes,12,opt,name=comment" json:"comment,omitempty"`
	Order       *string      `protobuf:"bytes,13,opt,name=order" json:"order,omitempty"`
	Star        *bool        `protobuf:"varint,14,opt,name=star" json:"star,omitempty"`
	Agg         *bool        `protobuf:"varint,15,opt,name=agg" json:"agg,omitempty"`
	Expr        *expr.NodePb `protobuf:"bytes,16,opt,name=Expr" json:"Expr,omitempty"`
	Guard       *expr.NodePb `protobuf:"bytes,17,opt,name=Guard" json:"Guard,omitempty"`
}

func (x *ColumnPb) Reset() {
	*x = ColumnPb{}
	mi := &file_rel_sql_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ColumnPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnPb) ProtoMessage() {}

func (x *ColumnPb) ProtoReflect() protoreflect.Message {
	mi := &file_rel_sql_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnPb.ProtoReflect.Descriptor instead.
func (*ColumnPb) Descriptor() ([]byte, []int) {
	return file_rel_sql_proto_rawDescGZIP(), []int{7}
}

func (x *ColumnPb) GetSourceQuote() []byte {
	if x != nil {
		return x.SourceQuote
	}
	return nil
}

func (x *ColumnPb) GetAsQuoteByte() []byte {
	if x != nil {
		return x.AsQuoteByte
	}
	return nil
}

func (x *ColumnPb) GetOriginalAs() string {
	if x != nil && x.OriginalAs != nil {
		return *x.OriginalAs
	}
	return ""
}

func (x *ColumnPb) GetLeft() string {
	if x != nil && x.Left != nil {
		return *x.Left
	}
	return ""
}

func (x *ColumnPb) GetRight() string {
	if x != nil && x.Right != nil {
		return *x.Right
	}
	return ""
}

func (x *ColumnPb) GetParentIndex() int32 {
	if x != nil && x.ParentIndex != nil {
		return *x.ParentIndex
	}
	return 0
}

func (x *ColumnPb) GetIndex() int32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *ColumnPb) GetSourceIndex() int32 {
	if x != nil && x.SourceIndex != nil {
		return *x.SourceIndex
	}
	return 0
}

func (x *ColumnPb) GetSourceField() string {
	if x != nil && x.SourceField != nil {
		return *x.SourceField
	}
	return ""
}

func (x *ColumnPb) GetAs() string {
	if x != nil && x.As != nil {
		return *x.As
	}
	return ""
}

func (x *ColumnPb) GetComment() string {
	if x != nil && x.Comment != nil {
		return *x.Comment
	}
	return ""
}

func (x *ColumnPb) GetOrder() string {
	if x != nil && x.Order != nil {
		return *x.Order
	}
	return ""
}

func (x *ColumnPb) GetStar() bool {
	if x != nil && x.Star != nil {
		return *x.Star
	}
	return false
}

func (x *ColumnPb) GetAgg() bool {
	if x != nil && x.Agg != nil {
		return *x.Agg
	}
	return false
}

func (x *ColumnPb) GetExpr() *expr.NodePb {
	if x != nil {
		return x.Expr
	}
	return nil
}

func (x *ColumnPb) GetGuard() *expr.NodePb {
	if x != nil {
		return x.Guard
	}
	return nil
}

type CommandColumnPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expr *expr.NodePb `protobuf:"bytes,1,opt,name=Expr" json:"Expr,omitempty"`
	Name *string      `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`
}

func (x *CommandColumnPb) Reset() {
	*x = CommandColumnPb{}
	mi := &file_rel_sql_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommandColumnPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandColumnPb) ProtoMessage() {}

func (x *CommandColumnPb) ProtoReflect() protoreflect.Message {
	mi := &file_rel_sql_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandColumnPb.ProtoReflect.Descriptor instead.
func (*CommandColumnPb) Descriptor() ([]byte, []int) {
	return file_rel_sql_proto_rawDescGZIP(), []int{8}
}

func (x *CommandColumnPb) GetExpr() *expr.NodePb {
	if x != nil {
		return x.Expr
	}
	return nil
}

func (x *CommandColumnPb) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

var File_rel_sql_proto protoreflect.FileDescriptor

var file_rel_sql_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x2f, 0x73, 0x71, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x03, 0x72, 0x65, 0x6c, 0x1a, 0x0f, 0x65, 0x78, 0x70, 0x72, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x97, 0x01, 0x0a, 0x0e, 0x53, 0x71, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x62, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x6c, 0x2e, 0x53,
	0x71, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x50, 0x62, 0x52, 0x06, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x6c, 0x2e, 0x53, 0x71, 0x6c, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x50, 0x62, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x31, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x72, 0x65, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x62, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0xbe, 0x04, 0x0a, 0x0b, 0x53, 0x71, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x50, 0x62, 0x12,
	0x0e, 0x0a, 0x02, 0x64, 0x62, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x02, 0x64, 0x62, 0x12,
	0x10, 0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x03, 0x72, 0x61,
	0x77, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74, 0x61, 0x72, 0x18, 0x03, 0x20, 0x02, 0x28, 0x08, 0x52,
	0x04, 0x73, 0x74, 0x61, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63,
	0x74, 0x18, 0x04, 0x20, 0x02, 0x28, 0x08, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63,
	0x74, 0x12, 0x27, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x50,
	0x62, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x24, 0x0a, 0x04, 0x66, 0x72,
	0x6f, 0x6d, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x6c, 0x2e, 0x53,
	0x71, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x62, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d,
	0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x74, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x69, 0x6e, 0x74, 0x6f, 0x12, 0x25, 0x0a, 0x05, 0x77, 0x68, 0x65, 0x72, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x65, 0x6c, 0x2e, 0x53, 0x71, 0x6c, 0x57, 0x68, 0x65,
	0x72, 0x65, 0x50, 0x62, 0x52, 0x05, 0x77, 0x68, 0x65, 0x72, 0x65, 0x12, 0x24, 0x0a, 0x06, 0x68,
	0x61, 0x76, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x65, 0x78,
	0x70, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x62, 0x52, 0x06, 0x68, 0x61, 0x76, 0x69, 0x6e,
	0x67, 0x12, 0x27, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x50,
	0x62, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x12, 0x27, 0x0a, 0x07, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x42, 0x79, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x65,
	0x6c, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x50, 0x62, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x42, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x31, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x65,
	0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x62, 0x52, 0x0a,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73,
	0x41, 0x67, 0x67, 0x18, 0x10, 0x20, 0x02, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x41, 0x67, 0x67,
	0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x11, 0x20,
	0x02, 0x28, 0x08, 0x52, 0x09, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x71, 0x72, 0x79, 0x18, 0x12, 0x20, 0x02, 0x28,
	0x08, 0x52, 0x09, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x71, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x77, 0x69, 0x74, 0x68, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x77, 0x69, 0x74, 0x68,
	0x22, 0xe8, 0x03, 0x0a, 0x0b, 0x53, 0x71, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x62,
	0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x49,
	0x6e, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x6c, 0x69, 0x61,
	0x73, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x6c, 0x2e, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x50, 0x62, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12,
	0x26, 0x0a, 0x08, 0x63, 0x6f, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x72, 0x65, 0x6c, 0x2e, 0x4b, 0x76, 0x49, 0x6e, 0x74, 0x52, 0x08, 0x63,
	0x6f, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2a, 0x0a, 0x09, 0x6a, 0x6f, 0x69, 0x6e, 0x4e,
	0x6f, 0x64, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x65, 0x78, 0x70,
	0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x62, 0x52, 0x09, 0x6a, 0x6f, 0x69, 0x6e, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x6c, 0x2e, 0x53, 0x71, 0x6c, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x50, 0x62, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x72, 0x61, 0x77, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x61, 0x77, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x70, 0x18,
	0x0a, 0x20, 0x02, 0x28, 0x05, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x65, 0x66,
	0x74, 0x4f, 0x72, 0x52, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0b, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0b,
	0x6c, 0x65, 0x66, 0x74, 0x4f, 0x72, 0x52, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6a,
	0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x6a,
	0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x45,
	0x78, 0x70, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x65, 0x78, 0x70, 0x72,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x62, 0x52, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x45, 0x78, 0x70,
	0x72, 0x12, 0x2c, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x51, 0x75, 0x65, 0x72, 0x79, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x6c, 0x2e, 0x53, 0x71, 0x6c, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x50, 0x62, 0x52, 0x08, 0x73, 0x75, 0x62, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x65, 0x65, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x73, 0x65, 0x65, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x68, 0x0a, 0x0a, 0x53,
	0x71, 0x6c, 0x57, 0x68, 0x65, 0x72, 0x65, 0x50, 0x62, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x70, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x6c, 0x2e,
	0x53, 0x71, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x50, 0x62, 0x52, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x04, 0x45, 0x78, 0x70, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x62, 0x52,
	0x04, 0x45, 0x78, 0x70, 0x72, 0x22, 0x8b, 0x01, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x62, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e,
	0x63, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x08, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e,
	0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x08, 0x52, 0x05, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x65, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x50, 0x62, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x73, 0x22, 0xbb, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x50, 0x62, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x50, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x06, 0x63, 0x6f, 0x6c, 0x50, 0x6f, 0x73, 0x12, 0x25, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x65, 0x6c, 0x2e, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x50, 0x62, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x74, 0x61, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73,
	0x74, 0x61, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x61, 0x73, 0x18, 0x06, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x02, 0x61, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x07, 0x20, 0x02, 0x28, 0x05, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x23, 0x0a, 0x05, 0x4b, 0x76, 0x49, 0x6e, 0x74, 0x12, 0x0c, 0x0a, 0x01, 0x6b, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x01, 0x6b, 0x12, 0x0c, 0x0a, 0x01, 0x76, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x01, 0x76, 0x22, 0xc0, 0x03, 0x0a, 0x08, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x50, 0x62, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x6f,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x51, 0x75, 0x6f, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x73, 0x51, 0x75, 0x6f, 0x74, 0x65,
	0x42, 0x79, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x61, 0x73, 0x51, 0x75,
	0x6f, 0x74, 0x65, 0x42, 0x79, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x6c, 0x41, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x41, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x20, 0x0a, 0x0b, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x0e, 0x0a,
	0x02, 0x61, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x61, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x74, 0x61, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x74, 0x61,
	0x72, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x67, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03,
	0x61, 0x67, 0x67, 0x12, 0x20, 0x0a, 0x04, 0x45, 0x78, 0x70, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x62, 0x52,
	0x04, 0x45, 0x78, 0x70, 0x72, 0x12, 0x22, 0x0a, 0x05, 0x47, 0x75, 0x61, 0x72, 0x64, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x50, 0x62, 0x52, 0x05, 0x47, 0x75, 0x61, 0x72, 0x64, 0x22, 0x47, 0x0a, 0x0f, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x50, 0x62, 0x12, 0x20, 0x0a, 0x04,
	0x45, 0x78, 0x70, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x65, 0x78, 0x70,
	0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x62, 0x52, 0x04, 0x45, 0x78, 0x70, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x20, 0x5a, 0x1e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x71, 0x6c, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x2f, 0x72, 0x65, 0x6c,
}

var (
	file_rel_sql_proto_rawDescOnce sync.Once
	file_rel_sql_proto_rawDescData = file_rel_sql_proto_rawDesc
)

func file_rel_sql_proto_rawDescGZIP() []byte {
	file_rel_sql_proto_rawDescOnce.Do(func() {
		file_rel_sql_proto_rawDescData = protoimpl.X.CompressGZIP(file_rel_sql_proto_rawDescData)
	})
	return file_rel_sql_proto_rawDescData
}

var file_rel_sql_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_rel_sql_proto_goTypes = []any{
	(*SqlStatementPb)(nil),  // 0: rel.SqlStatementPb
	(*SqlSelectPb)(nil),     // 1: rel.SqlSelectPb
	(*SqlSourcePb)(nil),     // 2: rel.SqlSourcePb
	(*SqlWherePb)(nil),      // 3: rel.SqlWherePb
	(*ProjectionPb)(nil),    // 4: rel.ProjectionPb
	(*ResultColumnPb)(nil),  // 5: rel.ResultColumnPb
	(*KvInt)(nil),           // 6: rel.KvInt
	(*ColumnPb)(nil),        // 7: rel.ColumnPb
	(*CommandColumnPb)(nil), // 8: rel.CommandColumnPb
	(*expr.NodePb)(nil),     // 9: expr.NodePb
}
var file_rel_sql_proto_depIdxs = []int32{
	1,  // 0: rel.SqlStatementPb.select:type_name -> rel.SqlSelectPb
	2,  // 1: rel.SqlStatementPb.source:type_name -> rel.SqlSourcePb
	4,  // 2: rel.SqlStatementPb.projection:type_name -> rel.ProjectionPb
	7,  // 3: rel.SqlSelectPb.columns:type_name -> rel.ColumnPb
	2,  // 4: rel.SqlSelectPb.from:type_name -> rel.SqlSourcePb
	3,  // 5: rel.SqlSelectPb.where:type_name -> rel.SqlWherePb
	9,  // 6: rel.SqlSelectPb.having:type_name -> expr.NodePb
	7,  // 7: rel.SqlSelectPb.groupBy:type_name -> rel.ColumnPb
	7,  // 8: rel.SqlSelectPb.orderBy:type_name -> rel.ColumnPb
	4,  // 9: rel.SqlSelectPb.projection:type_name -> rel.ProjectionPb
	7,  // 10: rel.SqlSourcePb.columns:type_name -> rel.ColumnPb
	6,  // 11: rel.SqlSourcePb.colIndex:type_name -> rel.KvInt
	9,  // 12: rel.SqlSourcePb.joinNodes:type_name -> expr.NodePb
	1,  // 13: rel.SqlSourcePb.source:type_name -> rel.SqlSelectPb
	9,  // 14: rel.SqlSourcePb.joinExpr:type_name -> expr.NodePb
	1,  // 15: rel.SqlSourcePb.subQuery:type_name -> rel.SqlSelectPb
	1,  // 16: rel.SqlWherePb.source:type_name -> rel.SqlSelectPb
	9,  // 17: rel.SqlWherePb.Expr:type_name -> expr.NodePb
	5,  // 18: rel.ProjectionPb.columns:type_name -> rel.ResultColumnPb
	7,  // 19: rel.ResultColumnPb.column:type_name -> rel.ColumnPb
	9,  // 20: rel.ColumnPb.Expr:type_name -> expr.NodePb
	9,  // 21: rel.ColumnPb.Guard:type_name -> expr.NodePb
	9,  // 22: rel.CommandColumnPb.Expr:type_name -> expr.NodePb
	23, // [23:23] is the sub-list for method output_type
	23, // [23:23] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_rel_sql_proto_init() }
func file_rel_sql_proto_init() {
	if File_rel_sql_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rel_sql_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_rel_sql_proto_goTypes,
		DependencyIndexes: file_rel_sql_proto_depIdxs,
		MessageInfos:      file_rel_sql_proto_msgTypes,
	}.Build()
	File_rel_sql_proto = out.File
	file_rel_sql_proto_rawDesc = nil
	file_rel_sql_proto_goTypes = nil
	file_rel_sql_proto_depIdxs = nil
}
