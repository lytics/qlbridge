// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v3.19.6
// source: schema/schema.proto

package schema

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Partition describes a range of data (in a Table).
// left-key is contained in this partition
// right key is not contained in this partition, in the next partition.
// So any value >= left-key, and < right-key is contained herein.
type TablePartition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Table      string       `protobuf:"bytes,1,opt,name=table,proto3" json:"table,omitempty"`
	Keys       []string     `protobuf:"bytes,2,rep,name=keys,proto3" json:"keys,omitempty"`
	Partitions []*Partition `protobuf:"bytes,3,rep,name=partitions,proto3" json:"partitions,omitempty"`
}

func (x *TablePartition) Reset() {
	*x = TablePartition{}
	mi := &file_schema_schema_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TablePartition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TablePartition) ProtoMessage() {}

func (x *TablePartition) ProtoReflect() protoreflect.Message {
	mi := &file_schema_schema_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TablePartition.ProtoReflect.Descriptor instead.
func (*TablePartition) Descriptor() ([]byte, []int) {
	return file_schema_schema_proto_rawDescGZIP(), []int{0}
}

func (x *TablePartition) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *TablePartition) GetKeys() []string {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *TablePartition) GetPartitions() []*Partition {
	if x != nil {
		return x.Partitions
	}
	return nil
}

// Partition describes a range of data
// the left-key is contained in this partition
// the right key is not contained in this partition, in the next one
type Partition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Left  string `protobuf:"bytes,2,opt,name=left,proto3" json:"left,omitempty"`
	Right string `protobuf:"bytes,3,opt,name=right,proto3" json:"right,omitempty"`
}

func (x *Partition) Reset() {
	*x = Partition{}
	mi := &file_schema_schema_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Partition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Partition) ProtoMessage() {}

func (x *Partition) ProtoReflect() protoreflect.Message {
	mi := &file_schema_schema_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Partition.ProtoReflect.Descriptor instead.
func (*Partition) Descriptor() ([]byte, []int) {
	return file_schema_schema_proto_rawDescGZIP(), []int{1}
}

func (x *Partition) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Partition) GetLeft() string {
	if x != nil {
		return x.Left
	}
	return ""
}

func (x *Partition) GetRight() string {
	if x != nil {
		return x.Right
	}
	return ""
}

type TablePb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of table lowercased
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Name of table (not lowercased)
	NameOriginal string `protobuf:"bytes,2,opt,name=nameOriginal,proto3" json:"nameOriginal,omitempty"`
	// some dbs are more hiearchical (table-column-family)
	Parent string `protobuf:"bytes,3,opt,name=parent,proto3" json:"parent,omitempty"`
	// Character set, default = utf8
	Charset uint32 `protobuf:"varint,4,opt,name=Charset,proto3" json:"Charset,omitempty"`
	// Partitions in this table, optional may be empty
	Partition *TablePartition `protobuf:"bytes,5,opt,name=partition,proto3" json:"partition,omitempty"`
	// Partition Count
	PartitionCt uint32 `protobuf:"varint,6,opt,name=PartitionCt,proto3" json:"PartitionCt,omitempty"`
	// List of indexes for this table
	Indexes []*Index `protobuf:"bytes,7,rep,name=indexes,proto3" json:"indexes,omitempty"`
	// context json bytes
	ContextJson []byte `protobuf:"bytes,8,opt,name=contextJson,proto3" json:"contextJson,omitempty"`
	// List of Fields, in order
	Fieldpbs []*FieldPb `protobuf:"bytes,9,rep,name=fieldpbs,proto3" json:"fieldpbs,omitempty"`
}

func (x *TablePb) Reset() {
	*x = TablePb{}
	mi := &file_schema_schema_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TablePb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TablePb) ProtoMessage() {}

func (x *TablePb) ProtoReflect() protoreflect.Message {
	mi := &file_schema_schema_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TablePb.ProtoReflect.Descriptor instead.
func (*TablePb) Descriptor() ([]byte, []int) {
	return file_schema_schema_proto_rawDescGZIP(), []int{2}
}

func (x *TablePb) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TablePb) GetNameOriginal() string {
	if x != nil {
		return x.NameOriginal
	}
	return ""
}

func (x *TablePb) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *TablePb) GetCharset() uint32 {
	if x != nil {
		return x.Charset
	}
	return 0
}

func (x *TablePb) GetPartition() *TablePartition {
	if x != nil {
		return x.Partition
	}
	return nil
}

func (x *TablePb) GetPartitionCt() uint32 {
	if x != nil {
		return x.PartitionCt
	}
	return 0
}

func (x *TablePb) GetIndexes() []*Index {
	if x != nil {
		return x.Indexes
	}
	return nil
}

func (x *TablePb) GetContextJson() []byte {
	if x != nil {
		return x.ContextJson
	}
	return nil
}

func (x *TablePb) GetFieldpbs() []*FieldPb {
	if x != nil {
		return x.Fieldpbs
	}
	return nil
}

type FieldPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string   `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Key         string   `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	Extra       string   `protobuf:"bytes,4,opt,name=extra,proto3" json:"extra,omitempty"`
	Data        string   `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	Length      uint32   `protobuf:"varint,6,opt,name=length,proto3" json:"length,omitempty"`
	Type        uint32   `protobuf:"varint,7,opt,name=type,proto3" json:"type,omitempty"`
	NativeType  uint32   `protobuf:"varint,8,opt,name=nativeType,proto3" json:"nativeType,omitempty"`
	DefLength   uint64   `protobuf:"varint,9,opt,name=defLength,proto3" json:"defLength,omitempty"`
	DefVal      []byte   `protobuf:"bytes,11,opt,name=defVal,proto3" json:"defVal,omitempty"`
	Indexed     bool     `protobuf:"varint,13,opt,name=indexed,proto3" json:"indexed,omitempty"`
	NoNulls     bool     `protobuf:"varint,14,opt,name=noNulls,proto3" json:"noNulls,omitempty"`
	Collation   string   `protobuf:"bytes,15,opt,name=collation,proto3" json:"collation,omitempty"`
	Roles       []string `protobuf:"bytes,16,rep,name=roles,proto3" json:"roles,omitempty"`
	Indexes     []*Index `protobuf:"bytes,17,rep,name=indexes,proto3" json:"indexes,omitempty"`
	ContextJson []byte   `protobuf:"bytes,18,opt,name=contextJson,proto3" json:"contextJson,omitempty"`
}

func (x *FieldPb) Reset() {
	*x = FieldPb{}
	mi := &file_schema_schema_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FieldPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldPb) ProtoMessage() {}

func (x *FieldPb) ProtoReflect() protoreflect.Message {
	mi := &file_schema_schema_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldPb.ProtoReflect.Descriptor instead.
func (*FieldPb) Descriptor() ([]byte, []int) {
	return file_schema_schema_proto_rawDescGZIP(), []int{3}
}

func (x *FieldPb) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FieldPb) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *FieldPb) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *FieldPb) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

func (x *FieldPb) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *FieldPb) GetLength() uint32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *FieldPb) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *FieldPb) GetNativeType() uint32 {
	if x != nil {
		return x.NativeType
	}
	return 0
}

func (x *FieldPb) GetDefLength() uint64 {
	if x != nil {
		return x.DefLength
	}
	return 0
}

func (x *FieldPb) GetDefVal() []byte {
	if x != nil {
		return x.DefVal
	}
	return nil
}

func (x *FieldPb) GetIndexed() bool {
	if x != nil {
		return x.Indexed
	}
	return false
}

func (x *FieldPb) GetNoNulls() bool {
	if x != nil {
		return x.NoNulls
	}
	return false
}

func (x *FieldPb) GetCollation() string {
	if x != nil {
		return x.Collation
	}
	return ""
}

func (x *FieldPb) GetRoles() []string {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *FieldPb) GetIndexes() []*Index {
	if x != nil {
		return x.Indexes
	}
	return nil
}

func (x *FieldPb) GetContextJson() []byte {
	if x != nil {
		return x.ContextJson
	}
	return nil
}

// Index a description of how field(s) should be indexed for a table.
type Index struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Fields        []string `protobuf:"bytes,2,rep,name=fields,proto3" json:"fields,omitempty"`
	PrimaryKey    bool     `protobuf:"varint,3,opt,name=primaryKey,proto3" json:"primaryKey,omitempty"`
	HashPartition []string `protobuf:"bytes,4,rep,name=hashPartition,proto3" json:"hashPartition,omitempty"`
	PartitionSize int32    `protobuf:"varint,5,opt,name=partitionSize,proto3" json:"partitionSize,omitempty"`
}

func (x *Index) Reset() {
	*x = Index{}
	mi := &file_schema_schema_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Index) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Index) ProtoMessage() {}

func (x *Index) ProtoReflect() protoreflect.Message {
	mi := &file_schema_schema_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Index.ProtoReflect.Descriptor instead.
func (*Index) Descriptor() ([]byte, []int) {
	return file_schema_schema_proto_rawDescGZIP(), []int{4}
}

func (x *Index) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Index) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *Index) GetPrimaryKey() bool {
	if x != nil {
		return x.PrimaryKey
	}
	return false
}

func (x *Index) GetHashPartition() []string {
	if x != nil {
		return x.HashPartition
	}
	return nil
}

func (x *Index) GetPartitionSize() int32 {
	if x != nil {
		return x.PartitionSize
	}
	return 0
}

var File_schema_schema_proto protoreflect.FileDescriptor

var file_schema_schema_proto_rawDesc = []byte{
	0x0a, 0x13, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x22, 0x6d, 0x0a,
	0x0e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x31, 0x0a, 0x0a, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x45, 0x0a, 0x09,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x65, 0x66,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x22, 0xc3, 0x02, 0x0a, 0x07, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x62, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x4f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x4f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x43, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x12, 0x34, 0x0a, 0x09, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x20, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x74, 0x12, 0x27, 0x0a, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x4a, 0x73, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x08,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x70, 0x62, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x62, 0x52,
	0x08, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x70, 0x62, 0x73, 0x22, 0xb0, 0x03, 0x0a, 0x07, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x50, 0x62, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x66, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x64, 0x65, 0x66, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x66, 0x56, 0x61, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x06, 0x64, 0x65, 0x66, 0x56, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x6f, 0x4e, 0x75, 0x6c, 0x6c, 0x73, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6e, 0x6f, 0x4e, 0x75, 0x6c, 0x6c, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x72,
	0x6f, 0x6c, 0x65, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65,
	0x73, 0x12, 0x27, 0x0a, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x18, 0x11, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x4a, 0x73, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x4a, 0x73, 0x6f, 0x6e, 0x22, 0x9f, 0x01, 0x0a,
	0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b,
	0x65, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x68, 0x61, 0x73, 0x68, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x68, 0x61, 0x73, 0x68, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x23,
	0x5a, 0x21, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x79, 0x74,
	0x69, 0x63, 0x73, 0x2f, 0x71, 0x6c, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2f, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_schema_schema_proto_rawDescOnce sync.Once
	file_schema_schema_proto_rawDescData = file_schema_schema_proto_rawDesc
)

func file_schema_schema_proto_rawDescGZIP() []byte {
	file_schema_schema_proto_rawDescOnce.Do(func() {
		file_schema_schema_proto_rawDescData = protoimpl.X.CompressGZIP(file_schema_schema_proto_rawDescData)
	})
	return file_schema_schema_proto_rawDescData
}

var file_schema_schema_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_schema_schema_proto_goTypes = []any{
	(*TablePartition)(nil), // 0: schema.TablePartition
	(*Partition)(nil),      // 1: schema.Partition
	(*TablePb)(nil),        // 2: schema.TablePb
	(*FieldPb)(nil),        // 3: schema.FieldPb
	(*Index)(nil),          // 4: schema.Index
}
var file_schema_schema_proto_depIdxs = []int32{
	1, // 0: schema.TablePartition.partitions:type_name -> schema.Partition
	0, // 1: schema.TablePb.partition:type_name -> schema.TablePartition
	4, // 2: schema.TablePb.indexes:type_name -> schema.Index
	3, // 3: schema.TablePb.fieldpbs:type_name -> schema.FieldPb
	4, // 4: schema.FieldPb.indexes:type_name -> schema.Index
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_schema_schema_proto_init() }
func file_schema_schema_proto_init() {
	if File_schema_schema_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_schema_schema_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_schema_schema_proto_goTypes,
		DependencyIndexes: file_schema_schema_proto_depIdxs,
		MessageInfos:      file_schema_schema_proto_msgTypes,
	}.Build()
	File_schema_schema_proto = out.File
	file_schema_schema_proto_rawDesc = nil
	file_schema_schema_proto_goTypes = nil
	file_schema_schema_proto_depIdxs = nil
}
